#include "std_arithcode.h"

#include <vector>
#include <iostream>

template<typename T>
void printf_vec(std::vector<T>& v){
    for(auto it : v){
        std::cout << it << " ";
    }
    std::cout << "\n";
}

template<typename T>
void printf_vec_int(std::vector<T>& v){
    for(auto it : v){
        std::cout << (int)it << " ";
    }
    std::cout << "\n";
}

int main(int argc, char** argv){
    Stream input = {2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0,
                  2,1,0,0,0,0,0,0,0,0,0,0,3,3,2,3,2,1,0};



    std::vector<real> cdf;
    calc_cdf(input, cdf);

    printf_vec(cdf);

    Stream output;
    encode(input, output, cdf);
    printf_vec(output);
    std::cout << "compression ratio: " << (double)output.size() / input.size() << std::endl;

    Stream decoded;
    decode(output, decoded, cdf);
    printf_vec_int(decoded);

    return 0;
}
